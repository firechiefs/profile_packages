<%- | String $success_color, String $error_color, Hash $validation_data | -%>
# generated by profile/templates/test_dotnet.ps1.epp

# variables passed in via PROFILE_PACKAGES
$consoleSuccess     = "<%= $success_color %>"
$consoleError       = "<%= $error_color %>"
$chocoPackagesHiera = @{} # empty hash

# Embedded puppet syntax:
# https://docs.puppetlabs.com/puppet/latest/reference/lang_template_epp.html

# build $chocoPackagesHiera PowerShell Hash from puppet array
<% $hiera_packages = keys($validation_data)
$hiera_packages.each |String $package_name| { -%>
$chocoPackagesHiera.Add("<%= $package_name %>","<%= $validation_data[$package_name][ensure] %>")
<% } -%>

# determine locally installed packages with 'choco' command
[array]$localChocoOutput = (choco list -lo -r)
# $localChocoOutput:
#   chocolatey|0.9.9.11
#   ChocolateyGUI|0.13.2
#   DotNet4.5|4.5.20120822
#   NugetPackageExplorer|3.8.0.20150702
#   PowerShell|4.0.20141001

# convert local choco packages into PowerShell hash
# --> start with empty hash
$localChocoPackagesHash = @{ }

# --> loop through choco output
foreach ($package in $localChocoOutput)
{
  # parse package name and version from 'choco' output
  $packageName = $package.Split("|")[0]
	$packageVersion = $package.Split("|")[1]

  # add to $localChocoPackagesHash PowerShell hash
  $localChocoPackagesHash.Add($packageName, $packageVersion)
}

# loop through $chocoPackagesHiera array
foreach ($packageName in $chocoPackagesHiera.Keys)
{
	# let's see if package in Hiera is installed locally
	if ( $localChocoPackagesHash.ContainsKey($packageName) )
	{
		# package name found. let's check for version match
		if ( $chocoPackagesHiera.Get_Item($packageName) -eq $localChocoPackagesHash.Get_Item($packageName) )
		{
			write-host "PASS: PROFILE_PACKAGES", $packageName, "Version =",
      $localChocoPackagesHash.Get_Item($packageName) -ForegroundColor $consoleSuccess
		}
        # If the versions don't match, is it because the package version is 'ensure => absent' ?
        elseif ($chocoPackagesHiera.Get_Item($packageName) -eq "absent")
        {
            # This is an error, the package should not be installed, but it is.
            write-host "FAIL: PROFILE_PACKAGES", $packageName,  "installed on machine, but puppet said ensure => absent" -ForegroundColor $consoleError
        }
		else
		# package found but version does not match
		{
			write-host "FAIL: PROFILE_PACKAGES", $packageName, "version",
      $localChocoPackagesHash.Get_Item($packageName), "doest not match",
      $chocoPackagesHiera.Get_Item($packageName) -ForegroundColor $consoleError
		}
	}
	elseif ($chocoPackagesHiera.Get_Item($packageName) -eq 'absent')
    {
        # the package doesn't exist on the machine because we said it should be absent.
        # this is a success
        write-host "PASS: PROFILE_PACKAGES", $packageName, "ensure => absent" -ForegroundColor $consoleSuccess
    }
	else
	{
		write-host "FAIL: PROFILE_PACKAGES", $packageName, "not found !!!!!" -ForegroundColor $consoleError
	}
}
